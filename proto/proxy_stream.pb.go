// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/proxy_stream.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExposeNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ExposeAmount  uint32                 `protobuf:"varint,2,opt,name=expose_amount,json=exposeAmount,proto3" json:"expose_amount,omitempty"` // e.g., "10" for 10 nodes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExposeNodesRequest) Reset() {
	*x = ExposeNodesRequest{}
	mi := &file_proto_proxy_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExposeNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposeNodesRequest) ProtoMessage() {}

func (x *ExposeNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposeNodesRequest.ProtoReflect.Descriptor instead.
func (*ExposeNodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{0}
}

func (x *ExposeNodesRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExposeNodesRequest) GetExposeAmount() uint32 {
	if x != nil {
		return x.ExposeAmount
	}
	return 0
}

type ExposeNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []string               `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`             // List of exposed nodes sidecars
	NodesOptP2P   []string               `protobuf:"bytes,2,rep,name=nodesOptP2P,proto3" json:"nodesOptP2P,omitempty"` // List of exposed nodes libP2P
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExposeNodesResponse) Reset() {
	*x = ExposeNodesResponse{}
	mi := &file_proto_proxy_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExposeNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposeNodesResponse) ProtoMessage() {}

func (x *ExposeNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposeNodesResponse.ProtoReflect.Descriptor instead.
func (*ExposeNodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{1}
}

func (x *ExposeNodesResponse) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ExposeNodesResponse) GetNodesOptP2P() []string {
	if x != nil {
		return x.NodesOptP2P
	}
	return nil
}

// ProxyMessage represents a message sent between the Optimum Proxy and clients.
type ProxyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Message       []byte                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Topic         string                 `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageId     string                 `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyMessage) Reset() {
	*x = ProxyMessage{}
	mi := &file_proto_proxy_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyMessage) ProtoMessage() {}

func (x *ProxyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyMessage.ProtoReflect.Descriptor instead.
func (*ProxyMessage) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProxyMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxyMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProxyMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ProxyMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// SubscribeRequest represents a request to subscribe to a topic.
type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // ID of the client subscribing to the topic
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                       // Topic to which the client wants to subscribe
	Threshold     float32                `protobuf:"fixed32,3,opt,name=threshold,proto3" json:"threshold,omitempty"`             // Optional threshold for the subscription, e.g., "0.5" for 50% of messages
	Topics        []string               `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`                     // List of topics to which the client wants to subscribe
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_proto_proxy_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubscribeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SubscribeRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                     // e.g., "subscribed", "unsubscribed", "error"
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                       // The topic to which the client is subscribed
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // The ID of the client that subscribed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_proto_proxy_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SubscribeResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type PublishRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // ID of the client publishing the message
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                       // Topic to which the message is published
	Message       []byte                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                   // The actual message content
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_proto_proxy_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{5}
}

func (x *PublishRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PublishRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PublishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                        // e.g., "published", "error"
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                          // The topic to which the message was published
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`    // The ID of the client that published the message
	MessageId     string                 `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // Unique identifier for the published message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_proto_proxy_stream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxy_stream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_proto_proxy_stream_proto_rawDescGZIP(), []int{6}
}

func (x *PublishResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PublishResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PublishResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

var File_proto_proxy_stream_proto protoreflect.FileDescriptor

const file_proto_proxy_stream_proto_rawDesc = "" +
	"\n" +
	"\x18proto/proxy_stream.proto\x12\x05proto\"V\n" +
	"\x12ExposeNodesRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rexpose_amount\x18\x02 \x01(\rR\fexposeAmount\"M\n" +
	"\x13ExposeNodesResponse\x12\x14\n" +
	"\x05nodes\x18\x01 \x03(\tR\x05nodes\x12 \n" +
	"\vnodesOptP2P\x18\x02 \x03(\tR\vnodesOptP2P\"\x8e\x01\n" +
	"\fProxyMessage\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\x12\x14\n" +
	"\x05topic\x18\x03 \x01(\tR\x05topic\x12\x1d\n" +
	"\n" +
	"message_id\x18\x04 \x01(\tR\tmessageId\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\"{\n" +
	"\x10SubscribeRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\x02R\tthreshold\x12\x16\n" +
	"\x06topics\x18\x04 \x03(\tR\x06topics\"^\n" +
	"\x11SubscribeResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1b\n" +
	"\tclient_id\x18\x03 \x01(\tR\bclientId\"]\n" +
	"\x0ePublishRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x18\n" +
	"\amessage\x18\x03 \x01(\fR\amessage\"{\n" +
	"\x0fPublishResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1b\n" +
	"\tclient_id\x18\x03 \x01(\tR\bclientId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x04 \x01(\tR\tmessageId2\x8b\x02\n" +
	"\vProxyStream\x12<\n" +
	"\fClientStream\x12\x13.proto.ProxyMessage\x1a\x13.proto.ProxyMessage(\x010\x01\x128\n" +
	"\aPublish\x12\x15.proto.PublishRequest\x1a\x16.proto.PublishResponse\x12>\n" +
	"\tSubscribe\x12\x17.proto.SubscribeRequest\x1a\x18.proto.SubscribeResponse\x12D\n" +
	"\vExposeNodes\x12\x19.proto.ExposeNodesRequest\x1a\x1a.proto.ExposeNodesResponseB.Z,github.com/getoptimum/mump2p-cli/proto;protob\x06proto3"

var (
	file_proto_proxy_stream_proto_rawDescOnce sync.Once
	file_proto_proxy_stream_proto_rawDescData []byte
)

func file_proto_proxy_stream_proto_rawDescGZIP() []byte {
	file_proto_proxy_stream_proto_rawDescOnce.Do(func() {
		file_proto_proxy_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_proxy_stream_proto_rawDesc), len(file_proto_proxy_stream_proto_rawDesc)))
	})
	return file_proto_proxy_stream_proto_rawDescData
}

var file_proto_proxy_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_proxy_stream_proto_goTypes = []any{
	(*ExposeNodesRequest)(nil),  // 0: proto.ExposeNodesRequest
	(*ExposeNodesResponse)(nil), // 1: proto.ExposeNodesResponse
	(*ProxyMessage)(nil),        // 2: proto.ProxyMessage
	(*SubscribeRequest)(nil),    // 3: proto.SubscribeRequest
	(*SubscribeResponse)(nil),   // 4: proto.SubscribeResponse
	(*PublishRequest)(nil),      // 5: proto.PublishRequest
	(*PublishResponse)(nil),     // 6: proto.PublishResponse
}
var file_proto_proxy_stream_proto_depIdxs = []int32{
	2, // 0: proto.ProxyStream.ClientStream:input_type -> proto.ProxyMessage
	5, // 1: proto.ProxyStream.Publish:input_type -> proto.PublishRequest
	3, // 2: proto.ProxyStream.Subscribe:input_type -> proto.SubscribeRequest
	0, // 3: proto.ProxyStream.ExposeNodes:input_type -> proto.ExposeNodesRequest
	2, // 4: proto.ProxyStream.ClientStream:output_type -> proto.ProxyMessage
	6, // 5: proto.ProxyStream.Publish:output_type -> proto.PublishResponse
	4, // 6: proto.ProxyStream.Subscribe:output_type -> proto.SubscribeResponse
	1, // 7: proto.ProxyStream.ExposeNodes:output_type -> proto.ExposeNodesResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_proxy_stream_proto_init() }
func file_proto_proxy_stream_proto_init() {
	if File_proto_proxy_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_proxy_stream_proto_rawDesc), len(file_proto_proxy_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_proxy_stream_proto_goTypes,
		DependencyIndexes: file_proto_proxy_stream_proto_depIdxs,
		MessageInfos:      file_proto_proxy_stream_proto_msgTypes,
	}.Build()
	File_proto_proxy_stream_proto = out.File
	file_proto_proxy_stream_proto_goTypes = nil
	file_proto_proxy_stream_proto_depIdxs = nil
}
